---
export interface Props {
  src: string
  alt: string
  width?: number
  height?: number
  quality?: number
  format?: 'webp' | 'avif' | 'auto'
  loading?: 'lazy' | 'eager'
  class?: string
  sizes?: string
  aspectRatio?: string
}

const {
  src,
  alt,
  width,
  height,
  quality = 85,
  format,
  loading = 'lazy',
  class: className,
  sizes,
  aspectRatio,
} = Astro.props

// For development and production image handling
// In development, use local images as fallback
// In production, we'll use the deployed domain to proxy through to R2
const isDev = import.meta.env.DEV
const baseUrl = isDev
  ? 'http://localhost:4322' // Development server
  : 'https://josemianton-com.bobeliadesign.workers.dev' // Production Workers URL

// Generate optimized image URL with query parameters
const generateImageUrl = (src: string, width?: number, quality?: number, format?: string) => {
  if (src.startsWith('http')) return src
  
  const url = new URL(`${baseUrl}/images/${src}`)
  
  // Add optimization parameters for production
  if (!isDev) {
    if (width) url.searchParams.set('w', width.toString())
    if (quality && quality !== 85) url.searchParams.set('q', quality.toString())
    if (format && format !== 'auto') url.searchParams.set('f', format)
  }
  
  return url.toString()
}

const imageUrl = generateImageUrl(src, width, quality, format)

// Generate srcset for responsive images with optimization
const generateSrcset = () => {
  if (!width) return undefined

  const widths = [
    Math.round(width * 0.5), // 50%
    Math.round(width * 0.75), // 75%
    width, // 100%
    Math.round(width * 1.5), // 150%
    Math.round(width * 2), // 200% for retina
  ].filter((w) => w <= 2400) // Max width cap

  return widths
    .map((w) => {
      const optimizedUrl = generateImageUrl(src, w, quality, format)
      return `${optimizedUrl} ${w}w`
    })
    .join(', ')
}

const srcset = generateSrcset()

// Container styles for aspect ratio
const containerStyle = aspectRatio ? `aspect-ratio: ${aspectRatio};` : undefined
---

{
  aspectRatio ? (
    <div
      style={containerStyle}
      class='relative overflow-hidden'
    >
      <img
        src={imageUrl}
        srcset={srcset}
        sizes={sizes}
        alt={alt}
        width={width}
        height={height}
        loading={loading}
        class={`absolute inset-0 w-full h-full object-cover ${className || ''}`}
        decoding='async'
      />
    </div>
  ) : (
    <img
      src={imageUrl}
      srcset={srcset}
      sizes={sizes}
      alt={alt}
      width={width}
      height={height}
      loading={loading}
      class={className}
      decoding='async'
    />
  )
}
