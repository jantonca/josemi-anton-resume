---
export interface Props {
  src: string
  alt: string
  width?: number
  height?: number
  quality?: number
  format?: 'webp' | 'avif' | 'auto'
  loading?: 'lazy' | 'eager'
  class?: string
  sizes?: string
  aspectRatio?: string
}

const {
  src,
  alt,
  width,
  height,
  quality = 85,
  format,
  loading = 'lazy',
  class: className,
  sizes,
  aspectRatio,
} = Astro.props

// Handle development and production image paths
// Our asset processor creates: name-800.webp, name-1600.webp, name-800.avif, name-1600.avif
const isDev = import.meta.env.DEV
const baseUrl = isDev
  ? '' // In dev, serve from /images/ directly
  : 'https://cdn.josemianton.com' // CDN subdomain for optimized delivery

// Generate optimized image URL based on our naming convention
const generateImageUrl = (
  src: string,
  width?: number,
  preferredFormat?: string
) => {
  if (src.startsWith('http')) return src
  
  // For SVG files, just return as-is
  if (src.endsWith('.svg')) {
    return `${baseUrl}/images/${src}`
  }
  
  // For processed images, use our naming convention
  if (width && !isDev) {
    // Remove extension from filename
    const nameWithoutExt = src.replace(/\.[^.]+$/, '')
    // Mobile-first: Find closest size from our presets: 400, 800, or 1200
    const targetWidth = width <= 400 ? 400 :    // Mobile
                       width <= 800 ? 800 :     // Tablet
                       1200;                    // Desktop
    // Use format preference or default to webp
    const targetFormat = preferredFormat || format || 'webp'
    
    return `${baseUrl}/images/${nameWithoutExt}-${targetWidth}.${targetFormat}`
  }
  
  // Fallback to original image in dev or if no width specified
  return `${baseUrl}/images/${src}`
}

const imageUrl = generateImageUrl(src, width, format)

// Generate srcset using our preprocessed images
const generateSrcset = () => {
  if (!src || src.endsWith('.svg')) return undefined
  
  // We have two sizes: 800 and 1600
  const nameWithoutExt = src.replace(/\.[^.]+$/, '')
  const preferredFormat = format || 'webp'
  
  if (isDev) {
    // In dev, just use the original image
    return undefined
  }
  
  // In production, use our optimized versions (mobile-first)
  return [
    `${baseUrl}/images/${nameWithoutExt}-400.${preferredFormat} 400w`,
    `${baseUrl}/images/${nameWithoutExt}-800.${preferredFormat} 800w`,
    `${baseUrl}/images/${nameWithoutExt}-1200.${preferredFormat} 1200w`
  ].join(', ')
}

const srcset = generateSrcset()

// Container styles for aspect ratio
const containerStyle = aspectRatio ? `aspect-ratio: ${aspectRatio};` : undefined
---

{
  aspectRatio ? (
    <div
      style={containerStyle}
      class='relative overflow-hidden'
    >
      <img
        src={imageUrl}
        srcset={srcset}
        sizes={sizes}
        alt={alt}
        width={width}
        height={height}
        loading={loading}
        class={`absolute inset-0 w-full h-full object-cover ${className || ''}`}
        decoding='async'
      />
    </div>
  ) : (
    <img
      src={imageUrl}
      srcset={srcset}
      sizes={sizes}
      alt={alt}
      width={width}
      height={height}
      loading={loading}
      class={className}
      decoding='async'
    />
  )
}
