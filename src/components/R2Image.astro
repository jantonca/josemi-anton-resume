---
// src/components/R2Image.astro
// Enhanced version with intelligent fallback to R2 when local images are missing

export interface Props {
  src: string
  alt: string
  width?: number
  height?: number
  quality?: number
  format?: 'webp' | 'avif' | 'auto'
  loading?: 'lazy' | 'eager'
  class?: string
  sizes?: string
  aspectRatio?: string
  fallbackToR2?: boolean
}

const {
  src,
  alt,
  width,
  height,
  quality = 85,
  format,
  loading = 'lazy',
  class: className,
  sizes,
  aspectRatio,
  fallbackToR2 = true,
} = Astro.props

import fs from 'fs'
import path from 'path'

// Check if local file exists (only in dev)
const checkLocalFileExists = (filename: string): boolean => {
  if (!import.meta.env.DEV) return false

  try {
    const imagePath = path.join(process.cwd(), 'public', 'images', filename)
    return fs.existsSync(imagePath)
  } catch {
    return false
  }
}

// Determine if we should use local or R2
const isDev = import.meta.env.DEV
const localFileExists = isDev ? checkLocalFileExists(src) : false
const useR2 = !isDev || (isDev && !localFileExists && fallbackToR2)

// CDN base URL
const r2BaseUrl = 'https://cdn.josemianton.com'

// Generate optimized image URL based on our naming convention
const generateImageUrl = (
  src: string,
  width?: number,
  preferredFormat?: string,
  forceR2: boolean = false
) => {
  if (src.startsWith('http')) return src

  // For SVG files, just return as-is
  if (src.endsWith('.svg')) {
    if (forceR2 || useR2) {
      return `${r2BaseUrl}/images/${src}`
    }
    return `/images/${src}`
  }

  // Development with local file
  if (isDev && localFileExists && !forceR2) {
    return `/images/${src}`
  }

  // Production or fallback to R2
  if (width && (forceR2 || useR2)) {
    // Remove extension from filename
    const nameWithoutExt = src.replace(/\.[^.]+$/, '')
    // Mobile-first: Find closest size from our presets: 400, 800, or 1200
    const targetWidth =
      width <= 400
        ? 400 // Mobile
        : width <= 800
          ? 800 // Tablet
          : 1200 // Desktop
    // Use format preference or default to webp
    const targetFormat = preferredFormat || format || 'webp'

    return `${r2BaseUrl}/images/${nameWithoutExt}-${targetWidth}.${targetFormat}`
  }

  // Fallback: original image from R2 or local
  if (forceR2 || useR2) {
    return `${r2BaseUrl}/images/${src}`
  }
  return `/images/${src}`
}

const imageUrl = generateImageUrl(src, width, format)

// Generate srcset using our preprocessed images
const generateSrcset = () => {
  if (!src || src.endsWith('.svg')) return undefined

  // Skip srcset in dev with local files
  if (isDev && localFileExists && !useR2) {
    return undefined
  }

  // Use R2 optimized versions
  const nameWithoutExt = src.replace(/\.[^.]+$/, '')
  const preferredFormat = format || 'webp'

  return [
    `${r2BaseUrl}/images/${nameWithoutExt}-400.${preferredFormat} 400w`,
    `${r2BaseUrl}/images/${nameWithoutExt}-800.${preferredFormat} 800w`,
    `${r2BaseUrl}/images/${nameWithoutExt}-1200.${preferredFormat} 1200w`,
  ].join(', ')
}

const srcset = generateSrcset()

// Container styles for aspect ratio
const containerStyle = aspectRatio ? `aspect-ratio: ${aspectRatio};` : undefined

// Dev mode indicator (optional - can be removed in production)
const showDevIndicator = isDev && !localFileExists && useR2
---

{
  aspectRatio ? (
    <div
      style={containerStyle}
      class={className}
    >
      <img
        src={imageUrl}
        alt={alt}
        width={width}
        height={height}
        loading={loading}
        srcset={srcset}
        sizes={sizes}
        class='w-full h-full object-cover'
        data-source={showDevIndicator ? 'r2-fallback' : 'local'}
      />
    </div>
  ) : (
    <img
      src={imageUrl}
      alt={alt}
      width={width}
      height={height}
      loading={loading}
      srcset={srcset}
      sizes={sizes}
      class={className}
      data-source={showDevIndicator ? 'r2-fallback' : 'local'}
    />
  )
}

{
  showDevIndicator && (
    <script>
      console.info(`[R2Image] Using CDN fallback for: ${Astro.props.src}`)
    </script>
  )
}
