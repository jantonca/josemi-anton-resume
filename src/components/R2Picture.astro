---
export interface Props {
  src: string
  alt: string
  sizes?: string
  widths?: number[]
  formats?: ('avif' | 'webp' | 'original')[]
  quality?: number
  loading?: 'lazy' | 'eager'
  class?: string
  pictureClass?: string
}

const {
  src,
  alt,
  sizes = '100vw',
  widths = [400, 800, 1200, 1600],
  formats = ['avif', 'webp', 'original'],
  quality = 85,
  loading = 'lazy',
  class: imgClass,
  pictureClass,
} = Astro.props

const baseUrl = src.startsWith('http') ? src : `/images/${src}`

// Generate srcset for pre-optimized images
const generateSrcset = (format?: string) => {
  return widths
    .map((w) => {
      let filename
      if (format === 'avif') {
        // Use size suffix for optimized images
        if (w <= 400) filename = `${src}-sm.avif`
        else if (w <= 800) filename = `${src}-md.avif`
        else if (w <= 1200) filename = `${src}-lg.avif`
        else filename = `${src}-xl.avif`
      } else if (format === 'webp') {
        if (w <= 400) filename = `${src}-sm.webp`
        else if (w <= 800) filename = `${src}-md.webp`
        else if (w <= 1200) filename = `${src}-lg.webp`
        else filename = `${src}-xl.webp`
      } else {
        // Original format (JPEG)
        if (w <= 400) filename = `${src}-sm.jpg`
        else if (w <= 800) filename = `${src}-md.jpg`
        else if (w <= 1200) filename = `${src}-lg.jpg`
        else filename = `${src}-xl.jpg`
      }
      return `/images/${filename} ${w}w`
    })
    .join(', ')
}

// Default image URL (medium size JPEG as fallback)
const defaultUrl = `/images/${src}-md.jpg`
---

<picture class={pictureClass}>
  {
    formats.includes('avif') && (
      <source
        type='image/avif'
        srcset={generateSrcset('avif')}
        sizes={sizes}
      />
    )
  }

  {
    formats.includes('webp') && (
      <source
        type='image/webp'
        srcset={generateSrcset('webp')}
        sizes={sizes}
      />
    )
  }

  <img
    src={defaultUrl}
    srcset={generateSrcset()}
    sizes={sizes}
    alt={alt}
    loading={loading}
    class={imgClass}
    decoding='async'
  />
</picture>
