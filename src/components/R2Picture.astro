---
export interface Props {
  src: string
  alt: string
  sizes?: string
  widths?: number[]
  formats?: ('avif' | 'webp' | 'original')[]
  quality?: number
  loading?: 'lazy' | 'eager'
  class?: string
  pictureClass?: string
}

const {
  src,
  alt,
  sizes = '100vw',
  widths = [400, 800, 1200, 1600],
  formats = ['avif', 'webp', 'original'],
  quality = 85,
  loading = 'lazy',
  class: imgClass,
  pictureClass,
} = Astro.props

const baseUrl = src.startsWith('http') ? src : `/images/${src}`

// Generate srcset for a specific format
const generateSrcset = (format?: string) => {
  return widths
    .map((w) => {
      const params = new URLSearchParams()
      params.append('w', w.toString())
      params.append('q', quality.toString())
      if (format && format !== 'original') {
        params.append('f', format)
      }
      return `${baseUrl}?${params} ${w}w`
    })
    .join(', ')
}

// Default image URL (medium size)
const defaultWidth = widths[Math.floor(widths.length / 2)]
const defaultUrl = `${baseUrl}?w=${defaultWidth}&q=${quality}`
---

<picture class={pictureClass}>
  {
    formats.includes('avif') && (
      <source
        type='image/avif'
        srcset={generateSrcset('avif')}
        sizes={sizes}
      />
    )
  }

  {
    formats.includes('webp') && (
      <source
        type='image/webp'
        srcset={generateSrcset('webp')}
        sizes={sizes}
      />
    )
  }

  <img
    src={defaultUrl}
    srcset={generateSrcset()}
    sizes={sizes}
    alt={alt}
    loading={loading}
    class={imgClass}
    decoding='async'
  />
</picture>
