---
export interface Props {
  src: string
  alt: string
  sizes?: string
  widths?: number[]
  formats?: ('avif' | 'webp' | 'original')[]
  quality?: number
  loading?: 'lazy' | 'eager'
  class?: string
  pictureClass?: string
  aspectRatio?: string
  fallbackToR2?: boolean
}

const {
  src,
  alt,
  sizes = '100vw',
  widths = [400, 800, 1200],
  formats = ['avif', 'webp'],
  quality = 85,
  loading = 'lazy',
  class: imgClass,
  pictureClass,
  aspectRatio,
  fallbackToR2 = true,
} = Astro.props

import fs from 'fs'
import path from 'path'

// Check if local file exists (only in dev) - Same logic as R2Image
const checkLocalFileExists = (filename: string): boolean => {
  if (!import.meta.env.DEV) return false

  try {
    const imagePath = path.join(process.cwd(), 'public', 'images', filename)
    return fs.existsSync(imagePath)
  } catch {
    return false
  }
}

// Determine if we should use local or R2 - Same logic as R2Image
const isDev = import.meta.env.DEV
const localFileExists = isDev ? checkLocalFileExists(src) : false
const useR2 = !isDev || (isDev && !localFileExists && fallbackToR2)

// CDN base URL - Same as R2Image
const r2BaseUrl = 'https://cdn.josemianton.com'

// Generate optimized image URL - Adapted from R2Image logic
const generateImageUrl = (
  src: string,
  width?: number,
  preferredFormat?: string,
  forceR2: boolean = false
) => {
  if (src.startsWith('http')) return src

  // For SVG files, just return as-is
  if (src.endsWith('.svg')) {
    if (forceR2 || useR2) {
      return `${r2BaseUrl}/images/${src}`
    }
    return `/images/${src}`
  }

  // Development with local file
  if (isDev && localFileExists && !forceR2) {
    return `/images/${src}`
  }

  // Production or fallback to R2
  if (width && (forceR2 || useR2)) {
    // Remove extension from filename
    const nameWithoutExt = src.replace(/\.[^.]+$/, '')
    // Mobile-first: Find closest size from our presets: 400, 800, or 1200
    const targetWidth =
      width <= 400
        ? 400 // Mobile
        : width <= 800
          ? 800 // Tablet
          : 1200 // Desktop
    // Use format preference or default to webp
    const targetFormat = preferredFormat || 'webp'

    return `${r2BaseUrl}/images/${nameWithoutExt}-${targetWidth}.${targetFormat}`
  }

  // Fallback: original image from R2 or local
  if (forceR2 || useR2) {
    return `${r2BaseUrl}/images/${src}`
  }
  return `/images/${src}`
}

// Generate srcset for specific format - Enhanced version
const generateSrcset = (format: string) => {
  if (!src || src.endsWith('.svg')) return undefined

  // Skip srcset in dev with local files
  if (isDev && localFileExists && !useR2) {
    return `/images/${src}`
  }

  // Use R2 optimized versions
  const nameWithoutExt = src.replace(/\.[^.]+$/, '')

  return widths
    .map((width) => {
      const filename = `${nameWithoutExt}-${width}.${format}`
      return `${r2BaseUrl}/images/${filename} ${width}w`
    })
    .join(', ')
}

// Default fallback image - Enhanced logic matching R2Image
const getDefaultUrl = () => {
  if (isDev && localFileExists && !useR2) {
    return `/images/${src}`
  }

  // For production or R2 fallback, use optimized version
  const nameWithoutExt = src.replace(/\.[^.]+$/, '')
  const defaultWidth = 800 // Good middle-ground default

  return `${r2BaseUrl}/images/${nameWithoutExt}-${defaultWidth}.webp`
}

const defaultUrl = getDefaultUrl()

// Container styles for aspect ratio - Same as R2Image
const containerStyle = aspectRatio ? `aspect-ratio: ${aspectRatio};` : undefined

// Dev mode indicator - Same as R2Image
const showDevIndicator = isDev && !localFileExists && useR2
---

{
  aspectRatio ? (
    <div
      style={containerStyle}
      class={pictureClass}
    >
      <picture class='w-full h-full'>
        {formats.includes('avif') && (
          <source
            type='image/avif'
            srcset={generateSrcset('avif')}
            sizes={sizes}
          />
        )}

        {formats.includes('webp') && (
          <source
            type='image/webp'
            srcset={generateSrcset('webp')}
            sizes={sizes}
          />
        )}

        {formats.includes('original') && !src.endsWith('.svg') && (
          <source
            srcset={generateSrcset(src.split('.').pop() || 'jpg')}
            sizes={sizes}
          />
        )}

        <img
          src={defaultUrl}
          alt={alt}
          loading={loading}
          class='w-full h-full object-cover'
          decoding='async'
          data-source={showDevIndicator ? 'r2-fallback' : 'local'}
        />
      </picture>
    </div>
  ) : (
    <picture class={pictureClass}>
      {formats.includes('avif') && (
        <source
          type='image/avif'
          srcset={generateSrcset('avif')}
          sizes={sizes}
        />
      )}

      {formats.includes('webp') && (
        <source
          type='image/webp'
          srcset={generateSrcset('webp')}
          sizes={sizes}
        />
      )}

      {formats.includes('original') && !src.endsWith('.svg') && (
        <source
          srcset={generateSrcset(src.split('.').pop() || 'jpg')}
          sizes={sizes}
        />
      )}

      <img
        src={defaultUrl}
        alt={alt}
        loading={loading}
        class={imgClass}
        decoding='async'
        data-source={showDevIndicator ? 'r2-fallback' : 'local'}
      />
    </picture>
  )
}

{
  showDevIndicator && (
    <script>
      console.info(`[R2Picture] Using CDN fallback for: ${Astro.props.src}`)
    </script>
  )
}
