---
export interface Props {
  src: string
  alt: string
  sizes?: string
  widths?: number[]
  formats?: ('avif' | 'webp' | 'original')[]
  quality?: number
  loading?: 'lazy' | 'eager'
  class?: string
  pictureClass?: string
}

const {
  src,
  alt,
  sizes = '100vw',
  widths = [400, 800, 1200], // Mobile-first: mobile, tablet, desktop
  formats = ['avif', 'webp'],
  loading = 'lazy',
  class: imgClass,
  pictureClass,
} = Astro.props

const isDev = import.meta.env.DEV
const baseUrl = isDev 
  ? '' 
  : 'https://cdn.josemianton.com' // CDN subdomain for optimized delivery

// Remove extension from source filename
const nameWithoutExt = src.replace(/\.[^.]+$/, '')

// Generate srcset for our naming convention: name-800.webp, name-1600.webp
const generateSrcset = (format: string) => {
  if (isDev) {
    // In dev, just use the original image
    return `/images/${src}`
  }
  
  // In production, use our optimized versions
  return widths
    .map((w) => {
      const filename = `${nameWithoutExt}-${w}.${format}`
      return `${baseUrl}/images/${filename} ${w}w`
    })
    .join(', ')
}

// Default fallback image (use webp as default)
const defaultUrl = isDev 
  ? `/images/${src}`
  : `${baseUrl}/images/${nameWithoutExt}-800.webp`
---

{
  (
    <picture class={pictureClass}>
      {formats.includes('avif') && (
        <source
          type='image/avif'
          srcset={generateSrcset('avif')}
          sizes={sizes}
        />
      )}

      {formats.includes('webp') && (
        <source
          type='image/webp'
          srcset={generateSrcset('webp')}
          sizes={sizes}
        />
      )}

      <img
        src={defaultUrl}
        srcset={!isDev ? generateSrcset('webp') : undefined}
        sizes={sizes}
        alt={alt}
        loading={loading}
        class={imgClass}
        decoding='async'
      />
    </picture>
  )
}
